
%%Example 1 LMI program:

%%full column rank:
%% Theorem 1
clc
clear all
close all

%% upper and lower bounds of MF
ll = 2; % model rules
qq = 20;
x_1=0:0.01:pi;
[row,clo]=size(x_1);
h_err = zeros(clo,ll);
f_err = zeros(clo,ll^2);
for aa = 1:clo
    h_err(aa,:) = hmferr_Func(x_1(aa),qq,ll);
    f_err(aa,:) = fmferr_Func(x_1(aa),qq,ll,ll);
end
interval = (clo-1)/qq;
huu_limit = zeros(qq-1,ll);
hdd_limit = zeros(qq-1,ll);
fuu_limit = zeros(qq-1,ll*ll);
fdd_limit = zeros(qq-1,ll*ll);
j = 0;
for i = 1:interval:(clo-1)
    j = j+1;
    temp1 = h_err(i:i+interval-1,:);
    huu_limit(j,:) = max(h_err(i:i+interval,:));
    hdd_limit(j,:) = min(h_err(i:i+interval,:));
    fuu_limit(j,:) = max(f_err(i:i+interval,:));
    fdd_limit(j,:) = min(f_err(i:i+interval,:));
end
num = 0;
for i = 1:ll
    for j = 1:ll
        num = num+1;
        fu_limit(:,i,j) = fuu_limit(:,num);
        fd_limit(:,i,j) = fdd_limit(:,num);
    end
end
dzu_limit = 0.5;

%% system parameters
int = 1;
A{1} = [-1,1;
        0,-2];
A{2} = [2,0;
        -0.2,-1];
B{1} = [0,1;
        1,0];
B{2} = [1,-1;
        0,0];
    
m = 2;
n = 2;

%% Initialize LMI variables
setlmis([]);
W = lmivar(1,[n 1]);
N = lmivar(1,[n 1]);
for i = 1:ll
    for j=1:ll
        T{i,j} = lmivar(1,[n 1]);
        Y{j} = lmivar(2,[m n]);
    end
end


num = 0;

%% Pij>0
        num = num+1;
        lmiterm([-num 1 1 N],1,1);
%% Tij>=0
for i = 1:ll
    for j=1:ll
        num = num+1;
        lmiterm([-num 1 1 T{i,j}],1,1);
    end
end

%% \Phi_{ij}+W+T_{ij}>0
for i = 1:ll
    for j=1:ll
        num = num+1;
        % \Phi_{ij}
        lmiterm([-num 1 1 N],A{i},1,'s');
        lmiterm([-num 1 1 Y{j}],B{i},1,'s');
        % W
        lmiterm([-num 1 1 W],1,1);
        % Tij
        lmiterm([-num 1 1 T{i,j}],1,1);
    end
end

%% dV<0 (Theorem 1)
for k = 1:qq
    for i1 = 1:2
        num = num+1;
        psi = vertice_Func(i1,k,qq);
        for i = 1:ll
            for j=1:ll
            % membership function part
                lmiterm([num 1 1 N],A{i},(fver_Func(psi,i,j,ll,ll)+fu_limit(k,i,j)),'s');
                lmiterm([num 1 1 Y{j}],B{i},(fver_Func(psi,i,j,ll,ll)+fu_limit(k,i,j)),'s');
                % W
                lmiterm([num 1 1 W],fu_limit(k,i,j),1);
                % Tij
                lmiterm([num 1 1 T{i,j}],fu_limit(k,i,j)-fd_limit(k,i,j),1);
            end
        end
    end
end

%% LMI Calculation
lmisys = getlmis;
[tmin,xfeas] = feasp(lmisys,[0 0 0 0 0],0);
N = dec2mat(lmisys,xfeas,N);
for i = 1:ll
    Y{i} = dec2mat(lmisys,xfeas,Y{i});
end
P = N^-1;
for j = 1:ll
    K{j}=Y{j}*P;
end
if(tmin>0)
    'LMI_error'
    b
%    break
else

end
tmin

'finish'

%%not full column rank:
%% Theorem 1
clc
clear all
close all

%% upper and lower bounds of MF
ll = 2; % model rules
qq = 20;
x_1=0:0.01:pi;
[row,clo]=size(x_1);
h_err = zeros(clo,ll);
f_err = zeros(clo,ll^2);
for aa = 1:clo
    h_err(aa,:) = hmferr_Func(x_1(aa),qq,ll);
    f_err(aa,:) = fmferr_Func(x_1(aa),qq,ll,ll);
end
interval = (clo-1)/qq;
huu_limit = zeros(qq-1,ll);
hdd_limit = zeros(qq-1,ll);
fuu_limit = zeros(qq-1,ll*ll);
fdd_limit = zeros(qq-1,ll*ll);
j = 0;
for i = 1:interval:(clo-1)
    j = j+1;
    temp1 = h_err(i:i+interval-1,:);
    huu_limit(j,:) = max(h_err(i:i+interval-1,:));
    hdd_limit(j,:) = min(h_err(i:i+interval-1,:));
    fuu_limit(j,:) = max(f_err(i:i+interval-1,:));
    fdd_limit(j,:) = min(f_err(i:i+interval-1,:));
end
num = 0;
for i = 1:ll
    for j = 1:ll
        num = num+1;
        fu_limit(:,i,j) = fuu_limit(:,num);
        fd_limit(:,i,j) = fdd_limit(:,num);
    end
end
dzu_limit = 0.5;

%% system parameters
int = 1;
A{1} = [-1,1;
        0,-2];
A{2} = [2,0;
        -0.2,-1];

B1{1} = [0;
        1];
B1{2} = [1;
        0];

m = 2;
n = 2;

%% Initialize LMI variables
setlmis([]);

W1 = lmivar(1,[n 1]);
N1 = lmivar(1,[n 1]);
for i = 1:ll
    for j=1:ll
        T1{i,j} = lmivar(1,[n 1]);
        Y1{j} = lmivar(2,[1 n]);
    end
end

num = 0;

%% Pij>0
        num = num+1;
        lmiterm([-num 1 1 N1],1,1);
%% Tij>=0
for i = 1:ll
    for j=1:ll
        num = num+1;
        lmiterm([-num 1 1 T1{i,j}],1,1);
    end
end

%% \Phi_{ij}+W+T_{ij}>0
for i = 1:ll
    for j=1:ll
        num = num+1;
        % \Phi_{ij}
        lmiterm([-num 1 1 N1],A{i},1,'s');
        lmiterm([-num 1 1 Y1{j}],B1{i},1,'s');
        % W
        lmiterm([-num 1 1 W1],1,1);
        % Tij
        lmiterm([-num 1 1 T1{i,j}],1,1);
    end
end

%% dV<0 (Theorem 1)
for k = 1:qq
    for i1 = 1:2
        num = num+1;
        psi = vertice_Func(i1,k,qq);
        for i = 1:ll
            for j=1:ll            
                lmiterm([num 1 1 N1],A{i},(fver_Func(psi,i,j,ll,ll)+fu_limit(k,i,j)),'s');
                lmiterm([num 1 1 Y1{j}],B1{i},(fver_Func(psi,i,j,ll,ll)+fu_limit(k,i,j)),'s');
                % W
                lmiterm([num 1 1 W1],fu_limit(k,i,j),1);
                % Tij
                lmiterm([num 1 1 T1{i,j}],fu_limit(k,i,j)-fd_limit(k,i,j),1);
            end
        end
    end
end

%% LMI Calculation
lmisys = getlmis;
[tmin,xfeas] = feasp(lmisys,[0 0 0 0 0],0);
N1 = dec2mat(lmisys,xfeas,N1);
for i = 1:ll
    Y1{i} = dec2mat(lmisys,xfeas,Y1{i});
end
P1 = N1^-1;
for j = 1:ll
    K1{j}=Y1{j}*P1;
end
if(tmin>0)
    'LMI_error'
  %  break
else
end
tmin

'finish'



%%Example 1 time domain programï¼š
clc
clear all
close all
tic
%% program parameters
jt = 2000;%Step count
Ts = 0.01;%stride
%% system parameters
global A Ah Kh Kh_s B_u B_s Bh Bh_s B_w C   hmf hmf_d row r column   t_q s1 s2  Bhd_u Bhd_s;
A{1}=[-1 1;0 -2];
A{2}=[2 0;-0.2 -1];
B_u{1}=[0 1;1 0];
B_u{2}=[1 -1;0 0];
B_s{1}=[0;1];
B_s{2}=[1;0];
C{1}=[1 0];
C{2}=C{1};
B_w{1}=[0.2;0.1];
B_w{2}=B_w{1};
s1=pi/12-0.5;
s2=0;
Bh = zeros(2,2);
Bh_s = zeros(2,1);
Kh= zeros(2,2);
Kh_s= zeros(1,2);
Ah = zeros(row,row);
Bhd_u = zeros(2,2);
Bhd_s = zeros(2,1);
t_q=1;
x1d=0;

r = 2; % number of rules
row = 2;
column = 1;
%% Initialize the system states and parameters
x = [pi/6 -1];
%% For figure
j=1;
t_draw = zeros(1,jt);
t_draw1 = zeros(1,jt);
u_draw = zeros(2,jt);
x_draw = zeros(2,jt);
s1_draw = zeros(1,jt);
s2_draw = zeros(1,jt);
s1_int=0;
s2_int=0;
%% RK4 Solution
for i = 1:jt
    %% Observer    

    hmf = [hmf_1(x(end,1)) hmf_2(x(end,1))];
    hmf_d = [hmf_1_deriv(x1d(1),x(end,1)) hmf_2_deriv(x1d(1),x(end,1))];
    hmf_draw(:,i)=hmf;
    CCC=zeros(column,row);
    [t,x] = ode45(@r2func,[Ts*(i-1) Ts*i],x(end,:)');
    y =CCC*x';   
    t_draw(:,i) = Ts*i;
        if t_q==1
            u=-((Bh_s'*Bh_s)^-1)*s1+Kh_s*x(end,:)'-((Bh_s'*Bh_s)^-1)*(theta(x(end,:))+0.1)*sgn(s1);
            x1d=Ah(1,:)*x(end,:)'+Bh_s*(u+delta(x(end,1)));
            u_draw(1,i) = u;
        else
            u=-((Bh'*Bh)^-1)*[s1;s2]+Kh*x(end,:)'-((Bh'*Bh)^-1)*(theta(x(end,:))+0.1)*[sgn(s1);sgn(s2)];
            x1d=Ah(1,:)*x(end,:)'+Bh(1,:)*(u+[delta(x(end,1));delta(x(end,2))]);
            u_draw(:,i) = u;
        end
    
    
    if t_q==1
        t_draw1(:,i) = Ts*i;
        s1_int=s1_int+(Bh_s'*(Ah+Bh_s*Kh_s)+Bhd_s')*x(end,:)'*Ts;
        s1=Bh_s'*x(end,:)'-s1_int(end,:);
    
    else
        s1_int=s1_int+(Bh(:,1)'*(Ah+Bh*Kh)+Bhd_u(:,1)')*x(end,:)'*Ts;
        s2_int=s2_int+(Bh(:,2)'*(Ah+Bh*Kh)+Bhd_u(:,2)')*x(end,:)'*Ts;
        s1=Bh(:,1)'*x(end,:)'-s1_int;
        s2=Bh(:,2)'*x(end,:)'-s2_int;
    end
    x_draw(:,i) = x(end,:)';
    s1_draw(i)=s1;
    s2_draw(i)=s2;
end

for i=2:jt-1
    if ((t_draw1(:,i)==0)&&t_draw1(:,i+1)~=0)
        singular(j)=i+1;
        j=j+1;
    end
end
for i=2:jt-1
    if ((t_draw1(:,i)~=0)&&(t_draw1(:,i+1)==0))
        singular(j)=i;
        j=j+1;
    end
end
'finish'
toc

function  result = r2func(t,x)
global A Ah Kh Kh_s B_u B_s  hmf hmf_d row r t_q s1 s2 Bh Bh_s Bhd_u Bhd_s;
K{1}=[-1.99425175646595,0.335606634454693;0.877348601430720,0.814920654697429];
K{2}=[-2.01137888571697,0.267591140980178;0.851137287644177,0.765660948225924];
K_s{1}=[-6.96142867949025,-2.70376659171571];
K_s{2}=[-6.30804298415470,-2.33952419943839];
Ah = zeros(row,row);
Bh = zeros(2,2);
Bh_s = zeros(2,1);
Bhd_u = zeros(2,2);
Bhd_s = zeros(2,1);
Kh= zeros(2,2);
Kh_s= zeros(1,2);
if abs(hmf(1)-0.5)<10^-15
    t_q=1;
    for i= 1:r 
        Ah = Ah+hmf(i)*A{i};
        Bh_s = Bh_s+hmf(i)*B_s{i};
        Bhd_s = Bhd_s+hmf_d(i)*B_s{i};
        Kh_s = Kh_s+hmf(i)*K_s{i};        
    end
    u=-((Bh_s'*Bh_s)^-1)*s1+Kh_s*x-((Bh_s'*Bh_s)^-1)*(theta(x)+0.1)*sgn(s1);
    result=Ah*x+Bh_s*(u+delta(x(1)));
else
    t_q=0;
   for i= 1:r
     Ah = Ah+hmf(i)*A{i};
     Bh = Bh+hmf(i)*B_u{i};
     Bhd_u = Bhd_u+hmf_d(i)*B_u{i};
     Kh = Kh+hmf(i)*K{i}; 
   end
  u=-((Bh'*Bh)^-1)*[s1;s2]+Kh*x-(theta(x)+0.1)*((Bh'*Bh)^-1)*[sgn(s1);sgn(s2)];
  result=Ah*x+Bh*(u+[delta(x(1));delta(x(2))]);
end



%%Example 2 LMI program:

%%full column rank
clc
clear all
close all
tic
%% system parameters
A{3} = [-2.9531 0 15.2533;
        31.4874 0 0;
        0 0 -3.3333];
A{1} = [-2.9531 0 3.7226;
        31.2874 0 0;
        0 0 -3.3333];
A{2} = A{1};
A{4} = A{3};
B{2} = [31.2500 0;
        -333.200 -333.200;
        0 402.0629];
B{1} = [31.2500 0;
        -333.200 -333.200;
        0 88.6824];
B{3} = B{1};
B{4} = B{2};
C{1} = [1 0 0;
        0 1 0];
C{3} = C{1};
C{2} = C{1};
C{4} = C{1};
E{1} = [0 0;
        0 0;
        0 0];
E{2} = E{1};
E{3} = E{1};
E{4} = E{1};
D{1} = [1 0;
        0 1];
D{2} = D{1};
D{3} = D{1};
D{4} = D{1};
%% number of rules
l = 4;
%%
q1 = 10;%10;
q2 = 10;%10;
x1 = linspace(1.2,2,q1);
x2 = linspace(1.3,4,q2);

for i = 1:l
    for j = 1:l
        delta1 = (2-1.2)/q1; 
        for k1 = 1:q1
            z1(1,k1) = 1.2+(k1-1)*delta1;
            z1(2,k1) =1.2+k1*delta1;
            z1_sample{k1} = linspace(z1(1,k1),z1(2,k1),20); 
        end
        delta2 = (4-1.3)/q2; 
        for k2 = 1:q2
            z2(1,k2) = 1.2+(k2-1)*delta2;
            z2(2,k2) =1.2+k2*delta2;
            z2_sample{k2} = linspace(z2(1,k2),z2(2,k2),20);
        end
        for k1 = 1:q1
            for k2 = 1:q2
                for sample = 1:20
                    f{k1,k2}(sample) = hx_Func(z1_sample{k1}(sample),z2_sample{k2}(sample),i).*hx_Func(z1_sample{k1}(sample),...
                        z2_sample{k2}(sample),j);
                end
            end
        end
        for k1 = 1:q1
            for k2 =1:q2
                for sample = 1:20
                    sign = 0;
                    if (z1_sample{k1}(sample)==z1(1,k1)&&z2_sample{k2}(sample)==z2(1,k2))||(z1_sample{k1}(sample)==z1(2,k1)&&z2_sample{k2}(sample)==z2(2,k2))||...
                            (z1_sample{k1}(sample)==z1(1,k1)&&z2_sample{k2}(sample)==z2(2,k2))||(z1_sample{k1}(sample)==z1(2,k1)&&z2_sample{k2}(sample)==z2(1,k2))
                        ff = f{k1,k2}(sample);
                        sign = 1;
                    end
                    
                    V1{k1}(sample) = (z1_sample{k1}(sample)-z1(2,k1))/(z1(1,k1)-z1(2,k1));
                    V2{k2}(sample) = (z2_sample{k2}(sample)-z2(2,k2))/(z2(1,k2)-z2(2,k2));
                    RR = V1{k1}(sample)*V2{k2}(sample)*f{k1,k2}(1)+(1-V1{k1}(sample))*(1-V2{k2}(sample))*f{k1,k2}(20);
                    if sign==1
                        F{k1,k2}(sample) = ff;
                    else
                        F{k1,k2}(sample) = RR;
                    end
                end
            end
        end
        k = 0;
       for k1 = 1:q1
           for k2 = 1:q2
               k = k+1;
               FF{i,j,k} = F{k1,k2};
               for sample = 1:20
                   FFF{i,j,k}(sample) = h_Func(z1_sample{k1}(sample),z2_sample{k2}(sample),i).*h_Func(z1_sample{k1}(sample),z2_sample{k2}(sample),j);
                   delta_f{i,j,k}(sample)=FFF{i,j,k}(sample)-FF{i,j,k}(sample);
               end
               deltaup_f(i,j,k)=max(max(delta_f{i,j,k}));
               deltadown_f(i,j,k)=min(min(delta_f{i,j,k}));
           end
       end
    end
end

%% dimensions
n = 3;
m = 2;


%% Initialize LMI variables
setlmis([]);
W = lmivar(1,[n 1]);
N = lmivar(1,[n 1]);
for i = 1:l
    for j=1:l
        T{i,j} = lmivar(1,[n 1]);
        Y{j} = lmivar(2,[m n]);
    end
end

num = 0;

%% Pij>0
        num = num+1;
        lmiterm([-num 1 1 N],1,1);
%% Tij>=0
for i = 1:l
    for j=1:l
        num = num+1;
        lmiterm([-num 1 1 T{i,j}],1,1);
    end
end

%% \Phi_{ij}+W+T_{ij}>0
for i = 1:l
    for j=1:l
        num = num+1;
        % \Phi_{ij}
        lmiterm([-num 1 1 N],A{i},1,'s');
        lmiterm([-num 1 1 Y{j}],B{i},1,'s');
        % W
        lmiterm([-num 1 1 W],1,1);
        % Tij
        lmiterm([-num 1 1 T{i,j}],1,1);
    end
end

%% dV<0 (Theorem 1)
for k = 1:q1*q2
    for i1 = 1:2
        num = num+1;
        for i = 1:l
            for j = 1:l
                if i1==1
                    FF1 = FF{i,j,k}(1);
                else
                    FF1 = FF{i,j,k}(20);
                end
                sum1 = FF1+deltaup_f(i,j,k); 
                sum2 = FF1-deltadown_f(i,j,k); 
                sum3=deltaup_f(i,j,k)-deltadown_f(i,j,k); 
                lmiterm([num 1 1 N],A{i},sum1,'s');
                lmiterm([num 1 1 Y{j}],B{i},sum1,'s');
                lmiterm([num 1 1 W],deltaup_f(i,j,k),1);
                lmiterm([num 1 1 T{i,j}],sum3,1);
            end
        end
    end
end
%% LMI Calculation
lmisys = getlmis;
[tmin,xfeas] = feasp(lmisys,[0 0 0 0 0],0);
N = dec2mat(lmisys,xfeas,N);
for i = 1:l
    Y{i} = dec2mat(lmisys,xfeas,Y{i});
end
P = N^-1;
for j = 1:l
    K{j}=Y{j}*P;
end
if(tmin>0)
    'LMI_error'
    b
else

end
tmin

'finish'

%%not full column rank
clc
clear all
close all
tic
%% system parameters
A{1} = [-2.9531 0 15.2533;
        31.4874 0 0;
        0 0 -3.3333];
A{3} = [-2.9531 0 3.7226;
        31.2874 0 0;
        0 0 -3.3333];
A{2} = A{1};
A{4} = A{3};
    
B{1} = [31.2500 ;
        -333.200 ;
        0 ];
B{2} = [31.2500 ;
        -333.200 ;
        0 ];
    
B{3} = B{1};
B{4} = B{2};
C{1} = [1 0 0;
        0 1 0];
C{3} = C{1};
C{2} = C{1};
C{4} = C{1};
E{1} = [0 0;
        0 0;
        0 0];
E{2} = E{1};
E{3} = E{1};
E{4} = E{1};
D{1} = [1 0;
        0 1];
D{2} = D{1};
D{3} = D{1};
D{4} = D{1};
%% number of rules
l = 4;
%%
q1 = 10;%10;
q2 = 10;%10;
x1 = linspace(1.2,2,q1);
x2 = linspace(1.3,4,q2);

for i = 1:l
    for j = 1:l
        delta1 = (2-1.2)/q1; 
        for k1 = 1:q1
            z1(1,k1) = 1.2+(k1-1)*delta1;
            z1(2,k1) =1.2+k1*delta1;
            z1_sample{k1} = linspace(z1(1,k1),z1(2,k1),20); 
        end
        delta2 = (4-1.3)/q2; 
        for k2 = 1:q2
            z2(1,k2) = 1.2+(k2-1)*delta2;
            z2(2,k2) =1.2+k2*delta2;
            z2_sample{k2} = linspace(z2(1,k2),z2(2,k2),20);
        end
        for k1 = 1:q1
            for k2 = 1:q2
                for sample = 1:20
                    f{k1,k2}(sample) = hx_Func(z1_sample{k1}(sample),z2_sample{k2}(sample),i).*hx_Func(z1_sample{k1}(sample),...
                        z2_sample{k2}(sample),j);
                end
            end
        end
        for k1 = 1:q1
            for k2 =1:q2
                for sample = 1:20
                    sign = 0;
                    if (z1_sample{k1}(sample)==z1(1,k1)&&z2_sample{k2}(sample)==z2(1,k2))||(z1_sample{k1}(sample)==z1(2,k1)&&z2_sample{k2}(sample)==z2(2,k2))||...
                            (z1_sample{k1}(sample)==z1(1,k1)&&z2_sample{k2}(sample)==z2(2,k2))||(z1_sample{k1}(sample)==z1(2,k1)&&z2_sample{k2}(sample)==z2(1,k2))
                        ff = f{k1,k2}(sample);
                        sign = 1;
                    end
                    
                    V1{k1}(sample) = (z1_sample{k1}(sample)-z1(2,k1))/(z1(1,k1)-z1(2,k1));
                    V2{k2}(sample) = (z2_sample{k2}(sample)-z2(2,k2))/(z2(1,k2)-z2(2,k2));
                    RR = V1{k1}(sample)*V2{k2}(sample)*f{k1,k2}(1)+(1-V1{k1}(sample))*(1-V2{k2}(sample))*f{k1,k2}(20);
                    if sign==1
                        F{k1,k2}(sample) = ff;
                    else
                        F{k1,k2}(sample) = RR;
                    end
                end
            end
        end
        k = 0;
       for k1 = 1:q1
           for k2 = 1:q2
               k = k+1;
               FF{i,j,k} = F{k1,k2};
               for sample = 1:20
                   FFF{i,j,k}(sample) = h_Func(z1_sample{k1}(sample),z2_sample{k2}(sample),i).*h_Func(z1_sample{k1}(sample),z2_sample{k2}(sample),j);
                   delta_f{i,j,k}(sample)=FFF{i,j,k}(sample)-FF{i,j,k}(sample);
               end
               deltaup_f(i,j,k)=max(max(delta_f{i,j,k}));
               deltadown_f(i,j,k)=min(min(delta_f{i,j,k}));
           end
       end
    end
end

%% dimensions
n = 3;
m = 1;
%% Initialize LMI variables
setlmis([]);
W = lmivar(1,[n 1]);
N = lmivar(1,[n 1]);
for i = 1:l
    for j=1:l
        T{i,j} = lmivar(1,[n 1]);
        Y{j} = lmivar(2,[m n]);
    end
end
num = 1;
%% Pij>0
        num = num+1;
        lmiterm([-num 1 1 N],1,1);
        
%% Tij>=0
for i = 1:l
    for j=1:l
        num = num+1;
        lmiterm([-num 1 1 T{i,j}],1,1);
    end
end

%% \Phi_{ij}+W+T_{ij}>0
for i = 1:l
    for j=1:l
        num = num+1;
        % \Phi_{ij}
        lmiterm([-num 1 1 N],A{i},1,'s');
        lmiterm([-num 1 1 Y{j}],B{i},1,'s');
        % W
        lmiterm([-num 1 1 W],1,1);
        % Tij
        lmiterm([-num 1 1 T{i,j}],1,1);
    end
end

%% dV<0 (Theorem 1)
for k = 1:q1*q2
    for i1 = 1:2
        num = num+1;
        for i = 1:l
            for j = 1:l
                if i1==1
                    FF1 = FF{i,j,k}(1);
                else
                    FF1 = FF{i,j,k}(20);
                end
                sum1 = FF1+deltaup_f(i,j,k); 
                sum2 = FF1-deltadown_f(i,j,k); 
                sum3=deltaup_f(i,j,k)-deltadown_f(i,j,k); 
                lmiterm([num 1 1 N],A{i},sum1,'s');
                lmiterm([num 1 1 Y{j}],B{i},sum1,'s');
                lmiterm([num 1 1 W],deltaup_f(i,j,k),1);
                lmiterm([num 1 1 T{i,j}],sum3,1);
            end
        end
    end
end
%% LMI Calculation
lmisys = getlmis;
[tmin,xfeas] = feasp(lmisys,[0 0 0 0 0],0);
N = dec2mat(lmisys,xfeas,N);
for i = 1:l
    Y{i} = dec2mat(lmisys,xfeas,Y{i});
end
P = N^-1;
for j = 1:l
    K{j}=Y{j}*P;
end
if(tmin>0)
    'LMI_error'
    
else

end
tmin

'finish'

function r = h_Func(x1,x2,i)
k1 = 1;%0.813;
% k2 = 0.0026;
k3 = 1;
k4 = 0.285;
x1_min = 1.2;
x1_max = 2;
x2_min = 1.3;
x2_max = 4;
Theta1_max = k1/(x1_min^k4-1);
Theta1_min = k1/(x1_max^k4-1);
Theta2_max = k1/(x1_min^k4-1);
Theta2_min = k1/(x1_max^k4-1);
Theta3_min = k3*(1-x2_min^(-k4));
Theta3_max = k3*(1-x2_max^(-k4));
[X1,X2]=meshgrid(x1,x2);
    h{1} = ((Theta1_max-( k1./(X1.^k4-1) ))/(Theta1_max-Theta1_min))...
.*((Theta3_max-(k3.*(1-X2.^(-k4))))/(Theta3_max-Theta3_min));
    h{2} = ((Theta1_max-( k1./(X1.^k4-1) ))/(Theta1_max-Theta1_min))...
.*(((k3*(1-X2.^(-k4))-Theta3_min))/(Theta3_max-Theta3_min));
    h{3} = ((( k1./(X1.^k4-1)-Theta1_min ))/(Theta1_max-Theta1_min))...
.*((Theta3_max-(k3*(1-X2.^(-k4))))/(Theta3_max-Theta3_min));
    h{4} = ((( k1./(X1.^k4-1)-Theta1_min ))/(Theta1_max-Theta1_min))...
.*(((k3*(1-X2.^(-k4))-Theta3_min))/(Theta3_max-Theta3_min));

r = h{i};




%%Example 2 time domain program:

clc
clear all
close all
tic
%% program parameters
jt = 1200;
Ts = 0.01;
%% system parameters
global A Ah Kh Kh2_s Kh1_s B_u B2_s B1_s Bh F Bh2_s Bh1_s B_w C xr  hmf hmf_d row r column t_q s1 s2  Bhd_u Bhd2_s Bhd1_s;
A{1} = [-2.9531 0 15.2533;
        31.4874 0 0;
        0 0 -3.3333];
A{3} = [-2.9531 0 3.7226;
        31.2874 0 0;
        0 0 -3.3333];
A{2} = A{1};
A{4} = A{3};
B_u{1} = [31.2500 0;
        -333.200 -333.200;
        0 402.0629];
B_u{2} = [31.2500 0;
        -333.200 -333.200;
        0 88.6824];
B_u{3} = B_u{1};
B_u{4} = B_u{2};
C{1} = [1 0 0;
        0 1 0];
C{3} = C{1};
C{2} = C{1};

B2_s{1} = [ 0;
        -333.200;
        402.0629];
B2_s{2} = [0;
        -333.200;
        88.6824];
B2_s{3} = B2_s{1};
B2_s{4} = B2_s{2};

B1_s{1} = [31.2500 ;
        -333.200 ;
        0 ];
B1_s{2} = [31.2500 ;
        -333.200 ;
        0 ];
B1_s{3} = B1_s{1};
B1_s{4} = B1_s{2};

B_w{1}=[0.2;0.1];
B_w{2}=B_w{1};
s1=pi/12-0.5;
s2=0;
Bh = zeros(3,2);
Bh2_s = zeros(3,1);
Bh1_s = zeros(3,1);
Kh= zeros(2,3);
Kh2_s= zeros(1,3);
Kh1_s=zeros(1,3);
Ah = zeros(row,row);
Bhd_u = zeros(3,2);
Bhd2_s = zeros(3,1);
Bhd1_s = zeros(3,1);
t_q=1;
xd=[0.1;0.1];
xr=[1.77 2.87 4.97];
e1=1;
e2=1;%
F=[e1 0;0 e2];%
r = 4; % number of rules
row = 3;
column = 2;
%% Initialize the system states and parameters
x = [1.3229 1.3596 5.6095];
%% For figure
j=1;
t_draw = zeros(1,jt);
t_draw1 = zeros(1,jt);
u_draw = zeros(2,jt);
x_draw = zeros(3,jt);
s1_draw = zeros(1,jt);
s2_draw = zeros(1,jt);
e1_draw=zeros(1,jt);
e2_draw=zeros(1,jt);
e_draw = zeros(3,jt);
V_draw=zeros(1,jt);
s1_int=0;
s2_int=0;
c=30;
%% RK4 Solution
for i = 1:jt
    
    if i==40
        e1=0;
    end
    
    if i==600
        e1=1;
    end
    
    e1_draw(i)=e1;
    e2_draw(i)=e2;
    F=[e1 0;0 e2];
    hmf = [h_Func(x(end,1),x(end,2),1) h_Func(x(end,1),x(end,2),2) h_Func(x(end,1),x(end,2),3) h_Func(x(end,1),x(end,2),4)];
    hmf_d = [hd_Func(x(end,1),x(end,2),xd(1),xd(2),1) hd_Func(x(end,1),x(end,2),xd(1),xd(2),2) ...
        hd_Func(x(end,1),x(end,2),xd(1),xd(2),3) hd_Func(x(end,1),x(end,2),xd(1),xd(2),4)];

    hmf_draw(:,i)=hmf;
    CCC=zeros(column,row);

    [t,x] = ode45(@r2func,[Ts*(i-1) Ts*i],x(end,:)');
    y =CCC*x';
    t_draw(:,i) = Ts*i;
        if e1==0
            u=-((Bh2_s'*Bh2_s)^-1)*s2+Kh2_s*(x(end,:)'-xr')-((Bh2_s'*Bh2_s)^-1)*(theta(x(end,:)-xr)+0.1)*sgn(s2);
            xd=Ah*(x(end,:)'-xr')+Bh2_s*u;
            u_draw(2,i) = u;
        else
            if e2~=0
                u=-((Bh'*Bh)^-1)*[s1;s2]+Kh*(x(end,:)'-xr')-((Bh'*Bh)^-1)*(theta(x(end,:)-xr)+0.1)*[sgn(s1);sgn(s2)];
                xd=Ah*(x(end,:)'-xr')+Bh*u;
                u_draw(:,i) = u;
            else
                u=-((Bh1_s'*Bh1_s)^-1)*s1+Kh1_s*(x(end,:)'-xr')-((Bh1_s'*Bh1_s)^-1)*(theta(x(end,:)-xr)+0.1)*sgn(s1);
                xd=Ah*x(end,:)'+Bh1_s*u;
                u_draw(1,i) = u;
            end
         end
    
    
    if e1==0
        t_draw1(:,i) = Ts*i;
        s2_int=s2_int+(Bh2_s'*(Ah+Bh2_s*Kh2_s)+Bhd2_s')*(x(end,:)'-xr')*Ts;
        s2=Bh2_s'*(x(end,:)'-xr')-s2_int;
    else
        if e2==0
            s1_int=s1_int+(Bh1_s'*(Ah+Bh1_s*Kh1_s)+Bhd1_s')*(x(end,:)'-xr')*Ts;
            s1=Bh1_s'*(x(end,:)'-xr')-s1_int;
        else
            s1_int=s1_int+(Bh(:,1)'*(Ah+Bh*Kh)+Bhd_u(:,1)')*(x(end,:)'-xr')*Ts;
            s2_int=s2_int+(Bh(:,2)'*(Ah+Bh*Kh)+Bhd_u(:,2)')*(x(end,:)'-xr')*Ts;
            s1=Bh(:,1)'*(x(end,:)'-xr')-s1_int;
            s2=Bh(:,2)'*(x(end,:)'-xr')-s2_int;
        end
    end
    
    x_draw(:,i) = x(end,:)';
    e_draw(:,i) = x(end,:)'-xr';
    V_draw(:,i) = e_draw(1,i)^2+e_draw(2,i)^2;
    s1_draw(i)=s1;
    s2_draw(i)=s2;
end

'finish'
toc


function  result = r2func(t,x)
global A Ah Kh Kh2_s Kh1_s B_u B2_s B1_s hmf hmf_d row r xr s1 s2 Bh Bh2_s Bh1_s Bhd_u Bhd2_s Bhd1_s F;
K{1}=[0.0952793247280578,0.0143927298822305,0.178269220936834;-0.00122756614111636,-0.00803430919305265,-0.119080746116427];
K{2}=[0.0975931254133627,0.0286747824549181,0.390537878998250;-0.00355911383051121,-0.0226668932949437,-0.335293639168525];
K{3}=[0.0952238616163203,0.0149611506554584,0.185144039941203;-0.00118832752024931,-0.00841334394384103,-0.124460905059296];
K{4}=[0.0957495605486574,0.0175033784956219,0.224190423377594;-0.00169578025946451,-0.0109859794878276,-0.162944954279368];

K2_s{1}=[-5.24041393760904,-0.131489158193641,-4.09363320451705];
K2_s{2}=[-8.36570108103382,-0.210079401179567,-6.54058232932421];
K2_s{3}=[-1.62606798292803,-0.0414488199508376,-1.29407385792604];
K2_s{4}=[-1.87406172768503,-0.0480701658389622,-1.50170475670723];
K1_s{1}=[-24.3767754584006,9.37634977653708e-05,-15043.7179931446];
K1_s{2}=[-24.3778154605235,9.37675730380248e-05,-15044.3544576521];
K1_s{3}=[-24.3789946936859,9.38191352610369e-05,-15044.7058385577];
K1_s{4}=[-24.3814268275185,9.38383686908788e-05,-15046.2001094569];
Ah = zeros(row,row);
Bh = zeros(3,2);
Bh2_s = zeros(3,1);
Bh1_s = zeros(3,1);
Bhd_u = zeros(3,2);
Bhd2_s = zeros(3,1);
Kh= zeros(2,3);
Kh2_s= zeros(1,3);

for i= 1:r
     Ah = Ah+hmf(i)*A{i};
     Bh = Bh+hmf(i)*B_u{i};
     Bhd_u = Bhd_u+hmf_d(i)*B_u{i};
     Bhd2_s = Bhd2_s+hmf_d(i)*B2_s{i};
     Bhd1_s = Bhd1_s+hmf_d(i)*B1_s{i};
     Bh2_s = Bh2_s+hmf(i)*B2_s{i};
     Bh1_s = Bh1_s+hmf(i)*B1_s{i};
     Kh = Kh+hmf(i)*K{i}; 
     Kh2_s = Kh2_s+hmf(i)*K2_s{i};
     Kh1_s = Kh1_s+hmf(i)*K1_s{i};
end
Bh=Bh*F;
Bh2_s=Bh2_s*F(2,2);
Bh1_s=Bh1_s*F(1,1);
if F(1,1)~=0
    if F(2,2)~=0
        u=-((Bh'*Bh)^-1)*[s1;s2]+Kh*(x-xr')-(theta(x-xr')+0.1)*((Bh'*Bh)^-1)*[sgn(s1);sgn(s2)];
        result=Ah*(x-xr')+Bh*u;
    else
        u=-((Bh1_s'*Bh1_s)^-1)*s1+Kh1_s*(x-xr')-(theta(x-xr')+0.1)*((Bh1_s'*Bh1_s)^-1)*sgn(s1);
        result=Ah*(x-xr')+Bh1_s*u;
    end
else
    u=-((Bh2_s'*Bh2_s)^-1)*s2+Kh2_s*(x-xr')-(theta(x-xr')+0.1)*((Bh2_s'*Bh2_s)^-1)*sgn(s2);
    result=Ah*(x-xr')+Bh2_s*u;
end
