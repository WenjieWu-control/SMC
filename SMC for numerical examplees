%%LMI program:

%% Theorem 1
clc
clear all
close all


ll = 2; % model rules
qq = 20;
x_1=0:0.01:pi;
[row,clo]=size(x_1);
h_err = zeros(clo,ll);
f_err = zeros(clo,ll^2);
for aa = 1:clo
    h_err(aa,:) = hmferr_Func(x_1(aa),qq,ll);
    f_err(aa,:) = fmferr_Func(x_1(aa),qq,ll,ll);
end
interval = (clo-1)/qq;
huu_limit = zeros(qq-1,ll);
hdd_limit = zeros(qq-1,ll);
fuu_limit = zeros(qq-1,ll*ll);
fdd_limit = zeros(qq-1,ll*ll);
j = 0;
for i = 1:interval:(clo-1)
    j = j+1;
    temp1 = h_err(i:i+interval-1,:);
    huu_limit(j,:) = max(h_err(i:i+interval,:));
    hdd_limit(j,:) = min(h_err(i:i+interval,:));
    fuu_limit(j,:) = max(f_err(i:i+interval,:));
    fdd_limit(j,:) = min(f_err(i:i+interval,:));
end
num = 0;
for i = 1:ll
    for j = 1:ll
        num = num+1;
        fu_limit(:,i,j) = fuu_limit(:,num);
        fd_limit(:,i,j) = fdd_limit(:,num);
    end
end
dzu_limit = 0.5;

%% system parameters
int = 1;
A{1} = [-1,1;
        0,-2];
A{2} = [2,0;
        -0.2,-1];
B{1} = [0,1;
        1,0];
B{2} = [1,-1;
        0,0];
    
%% constant matrices
m = 2;
n = 2;

%% Initialize LMI variables
setlmis([]);
W = lmivar(1,[n 1]);
N = lmivar(1,[n 1]);
for i = 1:ll
    for j=1:ll
        T{i,j} = lmivar(1,[n 1]);
        Y{j} = lmivar(2,[m n]);
    end
end

num = 0;


num = num+1;
lmiterm([-num 1 1 N],1,1);

for i = 1:ll
    for j=1:ll
        num = num+1;
        lmiterm([-num 1 1 T{i,j}],1,1);
    end
end


for i = 1:ll
    for j=1:ll
        num = num+1;
        % \Phi_{ij}
        lmiterm([-num 1 1 N],A{i},1,'s');
        lmiterm([-num 1 1 Y{j}],B{i},1,'s');
        % W
        lmiterm([-num 1 1 W],1,1);
        % Tij
        lmiterm([-num 1 1 T{i,j}],1,1);
    end
end


for k = 1:qq
    for i1 = 1:2
        num = num+1;
        psi = vertice_Func(i1,k,qq);
        for i = 1:ll
            for j=1:ll
            % membership function part
                % \Phi_{ij}
                lmiterm([num 1 1 N],A{i},(fver_Func(psi,i,j,ll,ll)+fu_limit(k,i,j)),'s');
                lmiterm([num 1 1 Y{j}],B{i},(fver_Func(psi,i,j,ll,ll)+fu_limit(k,i,j)),'s');
                % W
                lmiterm([num 1 1 W],fu_limit(k,i,j),1);
                % Tij
                lmiterm([num 1 1 T{i,j}],fu_limit(k,i,j)-fd_limit(k,i,j),1);
            end
        end
    end
end


lmisys = getlmis;
[tmin,xfeas] = feasp(lmisys,[0 0 0 0 0],0);
N = dec2mat(lmisys,xfeas,N);
for i = 1:ll
    Y{i} = dec2mat(lmisys,xfeas,Y{i});
end
P = N^-1;
for j = 1:ll
    K{j}=Y{j}*P;
end
if(tmin>0)
    'LMI_error'
    b
%    break
else

end
tmin

'finish'


%%time domain program:
tic
%% program parameters
jt = 2000;
Ts = 0.01;
%% system parameters
global A Ah Kh Kh_s B_u B_s Bh Bh_s B_w C   hmf hmf_d row r column   t_q s1 s2  Bhd_u Bhd_s;
A{1}=[-1 1;0 -2];
A{2}=[2 0;-0.2 -1];
B_u{1}=[0 1;1 0];
B_u{2}=[1 -1;0 0];
B_s{1}=[0;1];
B_s{2}=[1;0];
C{1}=[1 0];
C{2}=C{1};
B_w{1}=[0.2;0.1];
B_w{2}=B_w{1};
s1=pi/12-0.5;
s2=0;
Bh = zeros(2,2);
Bh_s = zeros(2,1);
Kh= zeros(2,2);
Kh_s= zeros(1,2);
Ah = zeros(row,row);
Bhd_u = zeros(2,2);
Bhd_s = zeros(2,1);
t_q=1;
x1d=0;

r = 2; % number of rules
row = 2;
column = 1;
%% Initialize the system states and parameters
x = [pi/6 -1];
%% For figure
j=1;
t_draw = zeros(1,jt);
t_draw1 = zeros(1,jt);
u_draw = zeros(2,jt);
x_draw = zeros(2,jt);
s1_draw = zeros(1,jt);
s2_draw = zeros(1,jt);
s1_int=0;
s2_int=0;
for i = 1:jt
    %% Observer    

    hmf = [hmf_1(x(end,1)) hmf_2(x(end,1))];
    hmf_d = [hmf_1_deriv(x1d(1),x(end,1)) hmf_2_deriv(x1d(1),x(end,1))];
    %FF = zeros(column,row);
    hmf_draw(:,i)=hmf;
    CCC=zeros(column,row);
    [t,x] = ode45(@r2func,[Ts*(i-1) Ts*i],x(end,:)');
    y =CCC*x';   
    t_draw(:,i) = Ts*i;
        if t_q==1
            u=-((Bh_s'*Bh_s)^-1)*s1+Kh_s*x(end,:)'-((Bh_s'*Bh_s)^-1)*(theta(x(end,:))+0.1)*sgn(s1);
            x1d=Ah(1,:)*x(end,:)'+Bh_s*(u+delta(x(end,1)));
            u_draw(1,i) = u;
        else
            u=-((Bh'*Bh)^-1)*[s1;s2]+Kh*x(end,:)'-((Bh'*Bh)^-1)*(theta(x(end,:))+0.1)*[sgn(s1);sgn(s2)];
            x1d=Ah(1,:)*x(end,:)'+Bh(1,:)*(u+[delta(x(end,1));delta(x(end,2))]);
            u_draw(:,i) = u;
        end
    
    
    if t_q==1
        t_draw1(:,i) = Ts*i;
        s1_int=s1_int+(Bh_s'*(Ah+Bh_s*Kh_s)+Bhd_s')*x(end,:)'*Ts;
        s1=Bh_s'*x(end,:)'-s1_int(end,:);
    
    else
        s1_int=s1_int+(Bh(:,1)'*(Ah+Bh*Kh)+Bhd_u(:,1)')*x(end,:)'*Ts;
        s2_int=s2_int+(Bh(:,2)'*(Ah+Bh*Kh)+Bhd_u(:,2)')*x(end,:)'*Ts;
        s1=Bh(:,1)'*x(end,:)'-s1_int;
        s2=Bh(:,2)'*x(end,:)'-s2_int;
    end
    x_draw(:,i) = x(end,:)';
    s1_draw(i)=s1;
    s2_draw(i)=s2;
end

for i=2:jt-1
    if ((t_draw1(:,i)==0)&&t_draw1(:,i+1)~=0)
        singular(j)=i+1;
        j=j+1;
    end
end
for i=2:jt-1
    if ((t_draw1(:,i)~=0)&&(t_draw1(:,i+1)==0))
        singular(j)=i;
        j=j+1;
    end
end
'finish'
toc

function  result = r2func(t,x)
global A Ah Kh Kh_s B_u B_s  hmf hmf_d row r t_q s1 s2 Bh Bh_s Bhd_u Bhd_s;
K{1}=[-1.99425175646595,0.335606634454693;0.877348601430720,0.814920654697429];
K{2}=[-2.01137888571697,0.267591140980178;0.851137287644177,0.765660948225924];
K_s{1}=[-6.96142867949025,-2.70376659171571];
K_s{2}=[-6.30804298415470,-2.33952419943839];
Ah = zeros(row,row);
Bh = zeros(2,2);
Bh_s = zeros(2,1);
Bhd_u = zeros(2,2);
Bhd_s = zeros(2,1);
Kh= zeros(2,2);
Kh_s= zeros(1,2);
if abs(hmf(1)-0.5)<10^-15%(x(1)<(pi/12)&&x(1)>(pi/24))||x(1)==pi/6
    t_q=1;
    for i= 1:r 
        Ah = Ah+hmf(i)*A{i};
        Bh_s = Bh_s+hmf(i)*B_s{i};
        Bhd_s = Bhd_s+hmf_d(i)*B_s{i};
        Kh_s = Kh_s+hmf(i)*K_s{i};        
    end
    u=-((Bh_s'*Bh_s)^-1)*s1+Kh_s*x-((Bh_s'*Bh_s)^-1)*(theta(x)+0.1)*sgn(s1);
    result=Ah*x+Bh_s*(u+delta(x(1)));
else
    t_q=0;
   for i= 1:r
     Ah = Ah+hmf(i)*A{i};
     Bh = Bh+hmf(i)*B_u{i};
     Bhd_u = Bhd_u+hmf_d(i)*B_u{i};
     Kh = Kh+hmf(i)*K{i}; 
   end
  u=-((Bh'*Bh)^-1)*[s1;s2]+Kh*x-(theta(x)+0.1)*((Bh'*Bh)^-1)*[sgn(s1);sgn(s2)];
  result=Ah*x+Bh*(u+[delta(x(1));delta(x(2))]);
end

